(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{386:function(t,a,n){"use strict";n.r(a);var e=n(26),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),n("p",[t._v("用于学习 Git，并记录相关的解决方案。")]),t._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),n("p",[t._v("\n1、"),n("a",{attrs:{href:"https://github.com/",target:"_blank"}},[t._v("GitHub")])]),t._v(" "),n("p",[t._v("\n2、"),n("a",{attrs:{href:"https://git-scm.com/book/zh/v2",target:"_blank"}},[t._v("Git-scm")])]),t._v(" "),n("p",[t._v("\n3、"),n("a",{attrs:{href:"https://shafiul.github.io/gitbook/index.html",target:"_blank"}},[t._v("shafiul Community Book")])]),t._v(" "),n("h2",{attrs:{id:"查看帮助"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查看帮助"}},[t._v("#")]),t._v(" 查看帮助")]),t._v(" "),n("p",[t._v("所有命令行最重要的当然是查看帮助文档：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("git help\n")])])]),n("p",[t._v("结果：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("git [--version] [--help] [-C <路径>] [-c <名称>=<取值>]\n           [--exec-path[=<路径>]] [--html-path] [--man-path] [--info-path]\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\n           [--git-dir=<路径>] [--work-tree=<路径>] [--namespace=<名称>]\n           <命令> [<参数>]\n\n这些是各种场合常见的 Git 命令：\n\n开始一个工作区（参见：git help tutorial）\n   clone      克隆仓库到一个新目录\n   init       创建一个空的 Git 仓库或重新初始化一个已存在的仓库\n\n在当前变更上工作（参见：git help everyday）\n   add        添加文件内容至索引\n   mv         移动或重命名一个文件、目录或符号链接\n   reset      重置当前 HEAD 到指定状态\n   rm         从工作区和索引中删除文件\n\n检查历史和状态（参见：git help revisions）\n   bisect     通过二分查找定位引入 bug 的提交\n   grep       输出和模式匹配的行\n   log        显示提交日志\n   show       显示各种类型的对象\n   status     显示工作区状态\n\n扩展、标记和调校您的历史记录\n   branch     列出、创建或删除分支\n   checkout   切换分支或恢复工作区文件\n   commit     记录变更到仓库\n   diff       显示提交之间、提交和工作区之间等的差异\n   merge      合并两个或更多开发历史\n   rebase     在另一个分支上重新应用提交\n   tag        创建、列出、删除或校验一个 GPG 签名的标签对象\n\n协同（参见：git help workflows）\n   fetch      从另外一个仓库下载对象和引用\n   pull       获取并整合另外的仓库或一个本地分支\n   push       更新远程引用和相关的对象\n\n命令 'git help -a' 和 'git help -g' 显示可用的子命令和一些概念帮助。\n查看 'git help <命令>' 或 'git help <概念>' 以获取给定子命令或概念的\n帮助。\n")])])]),n("p",[t._v("其实上面已经包含了常规的操作了，但一些时候还需要添加具体的例子来便于阅读、记忆。")]),t._v(" "),n("h2",{attrs:{id:"创建分支"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建分支"}},[t._v("#")]),t._v(" 创建分支")]),t._v(" "),n("p",[t._v("创建分支往往会基于某个分支来创建：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# 本地\n# 基于当前分支创建\ngit checkout master # 切换到 master 分支\ngit checkout -b branch1 # 根据 master 分支创建 branch1\n# 基于 branch2 分支创建\ngit checkout -b branch1 branch2\n\n# 远程\n# 基于 branch1 分支创建（一般会将命名相同，方便 push）\ngit checkout -b branch1 origin/branch1\n")])])]),n("h2",{attrs:{id:"查看日志"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#查看日志"}},[t._v("#")]),t._v(" 查看日志")]),t._v(" "),n("p",[t._v("参数可以组合，更加强大")]),t._v(" "),n("h3",{attrs:{id:"_1、当前分支"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、当前分支"}},[t._v("#")]),t._v(" 1、当前分支")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# 查看当前分支的所有日志：\ngit log\n# 查看当前分支的最近 n 条日志：\ngit log -n2\n# 以单行形式查看当前分支的所有日志：\ngit log --oneline\n# 以单行形式查看当前分支的最近 n 条日志：\ngit log -n4 --oneline\n# 添加图形查看当前分支的所有日志：\ngit log --graph\n")])])]),n("h3",{attrs:{id:"_2、所有分支"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、所有分支"}},[t._v("#")]),t._v(" 2、所有分支")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# 查看所有分支的所有日志：\ngit log --all\n# 以单行形式查看所有分支的所有日志：\ngit log --all --oneline\n# 查看所有分支的最近 n 条日志：\ngit log --all -n2\n# 以单行形式查看所有分支的最近 n 条日志：\ngit log --all -n4 --oneline\n# 添加图形查看所有分支的最近 n 条日志：\ngit log --all -n20 --oneline --graph\n")])])]),n("h3",{attrs:{id:"_3、某一分支"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、某一分支"}},[t._v("#")]),t._v(" 3、某一分支")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("# 可以指定某个分支（远程）：\ngit log origin/gh-pages\n\n# 其余的操作与上方一致\n")])])]),n("h2",{attrs:{id:"git生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#git生命周期"}},[t._v("#")]),t._v(" Git生命周期")]),t._v(" "),n("p",[n("img",{attrs:{src:"/assets/image/git_lifecycle.png",alt:"An image"}})]),n("p",[t._v("\nGit 仓库中，工作目录下的每一个文件不外乎两种状态：已跟踪或未跟踪。已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或存入暂存区。\n")]),t._v(" "),n("p",[t._v("\n工作目录中除已跟踪文件以外都属于未跟踪文件，它们即不存在于上次快照的记录中，也没有放入暂存区。\n")]),t._v(" "),n("p",[t._v("\n初次克隆某个仓库时，工作目录中所有的文件都属于已跟踪文件，并处于未修改状态。\n")]),n("p")])}),[],!1,null,null,null);a.default=s.exports}}]);